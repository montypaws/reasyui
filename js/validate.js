/*! * REasy UI Validate * * Depends: *  reasy-ui-core.js */(function(window, document) {  "use strict";  var utils = {    errorNum: 0,    getOptions: function(elem) {      var options = elem.getAttribute("data-reOptions");      return $.parseJSON(options);    },    getVal: function(elem) {      var ret = elem.value;      if (!ret && $.isFunction(elem.val)) {        ret = elem.val();      }      return ret || '';    },    isEmpty: function() {      var val = utils.getVal(this);      return val === "" || val === this.getAttribute('placeholder');    },    check: function(eventType) {      var $this = $(this),        thisVal = utils.getVal(this),        data = utils.getOptions(this) || null,        valid = $.validate.valid,        str = "",        isEmpty,        args,        validType;      args = [thisVal];      isEmpty = thisVal === "" || thisVal === this.getAttribute('placeholder');      if ((this.getAttribute('required') === 'required' || this.required) && isEmpty) {        if (eventType !== 'keyup' && eventType !== 'focus') {          str = $.reasyui._("this field is required");        }      } else if (thisVal && data !== null) {        args = args.concat(data.args || []);        validType = valid[data.type];        if (typeof validType === "function") {          str = validType.apply(valid, args);          /* 错误类型需要分类处理 */        } else {          if (eventType === 'keyup' || eventType === 'focus') {            /*  只验证明确的错误，提示修改方案 */            if (validType && typeof validType.specific === 'function') {              str = validType.specific.apply(validType, args);            }          } else {            /* 完整性验证，不明确的错误，无法给出修改方案 */            if (validType && typeof validType.all === 'function') {              str = validType.all.apply(validType, args);            }          }        }      }      if (!this['data-check-error']) {        utils.errorNum++;      }      $this.removeValidateTip(true);      if (str && !$.isHidden(this)) {        $this.addValidateTip(str, true)          .showValidateTip()          .addClass("validatebox-invalid");        this['data-check-error'] = true;      } else {        $this.removeClass("validatebox-invalid");        utils.errorNum--;        this['data-check-error'] = false;      }      return isEmpty;    },    show: function() {      $(this).showValidateTip();    },    hide: function() {      $(this).hideValidateTip();    }  };  /* 数据验证函数集合对象 */  var valid = {    len: function(str, min, max) {      var len = str.length;      if (len < min || len > max) {        return $.reasyui._('String length range is: %s - %s bit', [min, max]);      }    },    num: function(str, min, max) {      if (!(/^[0-9]{1,}$/).test(str)) {        return $.reasyui._("Must be number");      }      if (min && max) {        if (parseInt(str, 10) < min || parseInt(str, 10) > max) {          return $.reasyui._("Input range is: %s - %s", [min, max]);        }      }    },    mac: {      all: function(str) {        var ret = this.specific(str);        if (ret) {          return ret;        }        if (!(/^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$/).test(str)) {          return $.reasyui._("Please input a validity MAC address");        }      },      specific: function(str) {        var subMac1 = str.split(':')[0];        if (subMac1.charAt(1) && parseInt(subMac1.charAt(1), 16) % 2 !== 0) {          return $.reasyui._('The second character must be even number.');        }        if (str === "00:00:00:00:00:00") {          return $.reasyui._('Mac can not be 00:00:00:00:00:00');        }      }    },    ip: {      all: function(str) {        var ret = this.specific(str);        if (ret) {          return ret;        }        if (!(/^([1-9]|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(([0-9]|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.){2}([1-9]|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])$/).test(str)) {          return $.reasyui._("Please input a validity IP address");        }      },      specific: function(str) {        var ipArr = str.split('.'),          ipHead = ipArr[0];        if (ipArr[0] === '127') {          return $.reasyui._("IP address first input don't be 127, becuse it is loopback address.");        }        if (ipArr[0] > 223) {          return $.reasyui._("First input %s greater than 223.", [ipHead]);        }      }    },    dns: function() {},    mask: function(str) {      var rel = /^(254|252|248|240|224|192|128)\.0\.0\.0$|^(255\.(254|252|248|240|224|192|128|0)\.0\.0)$|^(255\.255\.(254|252|248|240|224|192|128|0)\.0)$|^(255\.255\.255\.(254|252|248|240|224|192|128|0))$/;      if (!rel.test(str)) {        return $.reasyui._("Please input a validity subnet mask");      }    },    email: function(str) {      var rel = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;      if (!rel.test(str)) {        return $.reasyui._("Please input a validity E-mail address");      }    },    time: function(str) {      if (!(/^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$/).test(str)) {        return $.reasyui._("Please input a valid time.");      }    },    hex: function(str) {      if (!(/^[0-9a-fA-F]{1,}$/).test(str)) {        return $.reasyui._("Must be hex.");      }    },    ascii: function(str, min, max) {      if (!(/^[ -~]+$/g).test(str)) {        return $.reasyui._("Must be ASCII.");      }      if (min || max) {        return valid.len(str, min, max);      }    },    pwd: function(str, minLen, maxLen) {      var ret;      if (!(/^[0-9a-zA-Z_]+$/).test(str)) {        return $.reasyui._('Must be numbers, letters or an underscore');      }      if (minLen && maxLen) {        ret = $.validate.valid.len(str, minLen, maxLen);        if (ret) {          return ret;        }      }    },    username: function(str) {      if (!(/^\w{1,}$/).test(str)) {        return $.reasyui._("Please input a validity username.");      }    },    ssidPasword: function(str, minLen, maxLen) {      var ret;      ret = $.validate.valid.ascii(str);      if (!ret && minLen && maxLen) {        ret = valid.len(str, minLen, maxLen);        if (ret) {          return ret;        }      }      return ret;    },    remarkTxt: function(str, banStr) {      var len = banStr.length,        curChar,        i;      for (i = 0; i < len; i++) {        curChar = banStr.charAt(i);        if (str.indexOf(curChar) !== -1) {          return $.reasyui._("Can't input: '%s'", [curChar]);        }      }    }  };  /******** 数据验证 *******/  $.validate = (function() {    var handler = {      focus: function(e) {        var isEmpty,          eventType = e ? e.type : null;        this.bluring = false;        utils.check.call(this, eventType);      },      blur: function(e) {        var that = this,          eventType = e ? e.type : null;        this.bluring = true;        window.setTimeout(function() {          if (!that.bluring) {            return;          }          utils.check.call(that, eventType);          utils.show.call(that);        }, 180);      }    };    function Validate() {      this.ok = false;      this.$elem = {};      this.options = {        custom: null,        success: function() {},        error: function() {}      };    }    Validate.prototype = {      constructor: Validate,      init: function(options) {        var $elems = $(".validatebox");        this.options = $.extend(this.options, options);        this.$elems = $elems;        $elems.each(function() {          var $this = $(this);          $this.on("focus", handler.focus)            .on("blur", handler.blur)            .on("keyup", function() {              utils.check.call(this, 'keyup');            });        });        $(".textboxs").each(function() {          var textBox = this;          if ($(this).hasClass('validatebox')) {            $(this).find('input').on("focus", function(e) {              handler.focus.call(textBox, e);            }).on('blur', function(e) {              handler.blur.call(textBox, e);            });          }        });      },      addElems: function(elems) {        $(elems).on("focus", handler.focus)          .on("blur", handler.blur)          .on("keyup", function() {            utils.check.call(this, 'keyup');          });      },      check: function(elems) {        $(elems).each(utils.check);      },      checkAll: function() {        var customResult = '';        $(".validatebox").each(function() {          utils.check.apply(this, []);        });        if (utils.errorNum === 0) {          if (typeof this.options.custom === 'function') {            customResult = this.options.custom();          }          if (!customResult) {            this._success();            return true;          }        }        this._error(customResult);      },      message: function() {      },      _success: function() {        this.ok = true;        if (typeof this.options.success === 'function') {          this.options.success();        }      },      _error: function(customResult) {        this.ok = false;        if (typeof this.options.error === 'function') {          this.options.error(customResult);        }      }    };    return function(options) {      var validataInstance = new Validate();      validataInstance.init(options);      return validataInstance;    };  }());  $.validate.utils = utils;  $.validate.valid = valid;  /* Validate Tip */  $.validateTipId = 0;  $.include({    addValidateTip: function(str) {      var $this = this;      function createTipElem(id, str, elem) {        var tipElem = document.createElement('span'),          tipId = "reasy-validate-tip-" + id,          span;        elem.validateTipId = tipId;        tipElem.innerHTML = '<span id="' + tipId +          '" class="validatebox-tip">' +          '<span class="validatebox-tip-content">' + str + '</span>' +          '<span class="validatebox-tip-pointer"></span>' +          '</span>';        return tipElem;      }      return this.each(function() {        var tipElem,          $tipElem;        tipElem = createTipElem($.validateTipId++, str, this);        $tipElem = $(tipElem);        $this.after(tipElem);      });    },    showValidateTip: function() {      return this.each(function() {        $("#" + this.validateTipId).css("visibility", "visible");      });    },    hideValidateTip: function() {      return this.each(function() {        $("#" + this.validateTipId).css("visibility", "hidden");      });    },    removeValidateTip: function(valid) {      return this.each(function() {        var $tipElem = $("#" + this.validateTipId);        if (!$tipElem) {          return;        }        $("#" + this.validateTipId).parent().remove();        this.validateTipId = '';      });    }  });})(window, document);